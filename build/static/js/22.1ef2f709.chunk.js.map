{"version":3,"sources":["components/maintenance/UploadImage.js","components/helpers/removeLocal.js","components/helpers/Ip.js"],"names":["IPModule","require","RemoveLocal","UploadImage","props","onChange","e","target","name","value","setState","state","pictures","img","locationToSetup","imgBLOB","message","onDrop","bind","jwt","getjwt","this","history","push","localStorage","getItem","teamID","axios","get","getIP","headers","then","res","catch","err","removeDataLocalStorage","pictureFiles","pictureDataURLs","length","map","image","withIcon","buttonText","imgExtension","label","maxFileSize","pic","style","marginTop","src","width","b64","onsuccess","onerror","Image","onload","canvas","document","createElement","height","getContext","drawImage","toBlob","b64toBlob","blob","url","window","URL","createObjectURL","sentImageToDatabase","error","console","log","method","data","showImageAfterUpload","showMessageUploadComplete","showMessageUploadError","color","alt","undefined","setTimeout","action","className","showNameImageUpload","showImageUpload","variant","onClick","sendImage","editImage","Component","module","exports","removeItem"],"mappings":"0SAQIA,G,KAAWC,EAAQ,KACnBC,EAAcD,EAAQ,IACLE,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA6ERC,SAAW,SAAAC,GAAM,IAAD,EACUA,EAAEC,OAAlBC,EADM,EACNA,KAAMC,EADA,EACAA,MAEd,EAAKC,SAAL,eACGF,EAAOC,KAhFV,EAAKE,MAAQ,CACPC,SAAU,GACVC,IAAM,GACNC,gBAAkB,GAClBC,QAAU,KACVC,QAAU,MAEhB,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBATC,E,gMAaTC,EAAMC,gBAERC,KAAKjB,MAAMkB,QAAQC,KAAK,U,SAEPC,aAAaC,QAAQ,kB,OAApCC,E,OACNC,IAAMC,IAAN,UAAa5B,EAAS6B,QAAtB,mCAAwDH,GACxD,CACII,QAAU,CAAE,iBAAmBX,KAElCY,MAAM,SAAAC,OAEJC,OAAO,SAAAC,GACNhC,EAAYiC,yBACZ,EAAK/B,MAAMkB,QAAQC,KAAK,a,mIAMvBa,EAAcC,GACnBhB,KAAKX,SAAS,CACZE,SAAWwB,EACXvB,IAAMwB,M,0CAKUzB,GAClB,OAAIA,GAAgC,IAApBA,EAAS0B,OAejB1B,EAAS2B,KAAK,SAAAC,GAClB,OACI,2BAAIA,EAAMhC,SAfhB,6BACE,6GACA,kBAAC,IAAD,CACEiC,UAAU,EACVC,WAAW,gBACXrC,SAAUgB,KAAKJ,OACf0B,aAAc,CAAC,OAAQ,OAAQ,OAAQ,QAAS,QAChDC,MAAO,eACPC,YAAa,c,sCAaLhC,GACd,GAAIA,GAAsB,IAAfA,EAAIyB,OAGf,OAAQzB,EAAI0B,KAAK,SAAAO,GACb,OACE,wBAAIC,MAAO,CAACC,UAAU,SACpB,yBAAKC,IAAKH,EAAKC,MAAO,CAACG,MAAO,gB,gCAe9BC,EAAKC,EAAWC,GACxB,IAAIxC,EAAM,IAAIyC,MACdzC,EAAIwC,QAAUA,EACdxC,EAAI0C,OAAS,WACT,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAON,MAAQrC,EAAIqC,MACnBM,EAAOG,OAAS9C,EAAI8C,OACVH,EAAOI,WAAW,MACxBC,UAAUhD,EAAK,EAAG,EAAG2C,EAAON,MAAOM,EAAOG,QAC9CH,EAAOM,OAAOV,IAElBvC,EAAIoC,IAAME,I,uKAIL9B,KAAK0C,UAAU1C,KAAKV,MAAME,KAC7B,SAACmD,GACK,IAAIC,EAAMC,OAAOC,IAAIC,gBAAgBJ,GACrC,EAAKtD,SAAS,CAAEK,QAAUkD,IAC1B,EAAKI,yBACR,SAACC,GACAC,QAAQC,IAAI,WAAWF,M,2RAMV9C,aAAaC,QAAQ,kB,cAApCC,E,gBACYN,c,QAAZD,E,SAEAE,KAAKjB,MAAMkB,QAAQC,KAAK,UAG5BI,IAAM,CACJ8C,OAAQ,OACRR,IAAI,GAAD,OAAKjE,EAAS6B,QAAd,uBACHC,QAAU,CAAE,iBAAmBX,GAC7BuD,KAAM,CACJ,2BAAwBhD,GACxB,KAAS,CACD,0BAAuBL,KAAKV,MAAMG,iBAClC,wBAAqBO,KAAKV,MAAMI,aAG3CgB,MAAM,SAACC,GACR,EAAK2C,uBACL,EAAKC,4BACLL,QAAQC,IAAI,QAASxC,MACpBC,OAAO,SAACC,GACTqC,QAAQC,IAAI,OAAQtC,GACpB,EAAK2C,4B,mJAKP,OAA0B,OAAvBxD,KAAKV,MAAMI,QACL,uBAAGgC,MAAO,CAAC+B,MAAM,QAAjB,sHAGL,yBAAK/B,MAAO,CAACC,UAAU,SACrB,yBAAK+B,IAAI,KAAK9B,IAAK5B,KAAKV,MAAMI,QAASgC,MAAO,CAACG,MAAO,a,kCAO9D,OAAQ7B,KAAKX,SAAS,CAClBE,SAAU,GACVC,IAAM,GACNE,QAAU,S,kDAIc,IAAD,OACzBM,KAAKX,SAAS,CACZM,QAAU,gHAEegE,IAAvB3D,KAAKV,MAAMK,SACPiE,YAAW,WACP,EAAKvE,SAAS,CACZM,QAAU,SAEb,O,+CAIU,IAAD,OACtBK,KAAKX,SAAS,CACZM,QAAU,oOAERiE,YAAW,WACP,EAAKvE,SAAS,CACVM,QAAU,SAEf,O,+BAGG,IAAD,SACqCK,KAAKV,MAAzCC,EADD,EACCA,SAAUC,EADX,EACWA,IAAKE,EADhB,EACgBA,QAASC,EADzB,EACyBA,QAEhC,OACE,6BAEA,6BAEA,0BAAMkE,OAAO,GAAGT,OAAO,QACrB,kBAAC,IAAD,CAAU7B,MAAM,uFAAiBpC,KAAK,kBAAkBH,SAAUgB,KAAKhB,YAa3E,wBAAK8E,UAAU,eACZ9D,KAAK+D,oBAAoBxE,GACzBS,KAAKgE,gBAAgBxE,IAGxB,yBAAKsE,UAAU,mBACf,kBAAC,IAAD,CAAQG,QAAQ,4BAA4BC,QAAU,kBAAM,EAAKC,cAAjE,0DAC0B,MAAtBnE,KAAKV,MAAMI,SAAqB,6BACV,MAAtBM,KAAKV,MAAMI,SACT,kBAAC,IAAD,CAAQuE,QAAQ,4BAA4BC,QAAU,kBAAM,EAAKE,cAAjE,sEAEJ,6BACwB,MAAtBpE,KAAKV,MAAMI,SACX,uBAAGgC,MAAO,CAAEC,UAAU,QAAShC,GAEjC,6BACAK,KAAKsD,qBAAqB5D,U,GA/NK2E,c,iBCVzCC,EAAOC,QAAQzD,uBAAyB,WACpCX,aAAaqE,WAAW,QACxBrE,aAAaqE,WAAY,WACzBrE,aAAaqE,WAAW,oB,iBCH5BF,EAAOC,QAAQ/D,MAAQ,WACnB,MAAO","file":"static/js/22.1ef2f709.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios'\r\nimport { getjwt } from '../helpers/jwt'\r\nimport ImageUploader from \"react-images-upload\"\r\nimport { MDBInput } from \"mdbreact\"\r\nimport Loadable from 'react-loadable'\r\n\r\nvar IPModule = require('../helpers/Ip')\r\nvar RemoveLocal = require('../helpers/removeLocal')\r\nexport default class UploadImage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n              pictures: [] ,\r\n              img : [] ,\r\n              locationToSetup : '',\r\n              imgBLOB : null,\r\n              message : null,\r\n            };\r\n        this.onDrop = this.onDrop.bind(this);\r\n      }\r\n\r\n  async componentDidMount(){\r\n        const jwt = getjwt()\r\n        if(!jwt) {\r\n            this.props.history.push('/login')\r\n        }\r\n        const teamID = await localStorage.getItem('teamproject_ID')\r\n        axios.get(`${IPModule.getIP()}:5003/api/v1/projectjob/${teamID}` , \r\n        { \r\n            headers : { 'x-access-token' : jwt  } \r\n        })\r\n        .then( res => {\r\n                \r\n        }).catch( err => {\r\n            RemoveLocal.removeDataLocalStorage()\r\n            this.props.history.push('/login')\r\n        })\r\n        \r\n    }\r\n\r\n\r\n      onDrop(pictureFiles, pictureDataURLs) {\r\n        this.setState({\r\n          pictures : pictureFiles,\r\n          img : pictureDataURLs,\r\n        });\r\n\r\n      }\r\n\r\n      showNameImageUpload(pictures){\r\n        if(!pictures || pictures.length === 0){\r\n          return (\r\n          <div>\r\n            <p>อัพโหลดรูปภาพ</p>\r\n            <ImageUploader\r\n              withIcon={true}\r\n              buttonText=\"Choose images\"\r\n              onChange={this.onDrop}\r\n              imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\", \".gif\"]}\r\n              label={\"Upload image\"}\r\n              maxFileSize={15189789}\r\n            />\r\n          </div>\r\n            )\r\n        } else {\r\n        return  pictures.map( image => {\r\n            return (\r\n                <p>{image.name}</p>\r\n            )\r\n          })\r\n        }\r\n      }\r\n\r\n      showImageUpload(img){\r\n        if(!img || img.length === 0){\r\n\r\n        } else {\r\n        return  img.map( pic => {\r\n            return (\r\n              <li style={{marginTop:'20px'}}>\r\n                <img src={pic} style={{width: '100%'}}/>\r\n              </li>\r\n            )\r\n          })\r\n        }\r\n      }\r\n\r\n      onChange = e => {\r\n        const { name, value } = e.target\r\n    \r\n        this.setState({\r\n          [name]: value\r\n        })\r\n      }\r\n\r\n      b64toBlob(b64, onsuccess, onerror) {\r\n        var img = new Image();\r\n        img.onerror = onerror;\r\n        img.onload = function onload() {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            var ctx = canvas.getContext('2d');\r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n            canvas.toBlob(onsuccess);\r\n        };\r\n        img.src = b64;\r\n    }\r\n\r\n    async  sendImage(){\r\n      await  this.b64toBlob(this.state.img,\r\n          (blob) => {\r\n                var url = window.URL.createObjectURL(blob);\r\n                this.setState({ imgBLOB : url })\r\n                this.sentImageToDatabase()\r\n          }, (error) => {\r\n              console.log(\"error = \"+error)\r\n          });\r\n\r\n      }\r\n\r\n  async sentImageToDatabase(){\r\n      const teamID = await localStorage.getItem('teamproject_ID')\r\n      const jwt = await getjwt()\r\n        if(!jwt) {\r\n            this.props.history.push('/login')\r\n        }\r\n\r\n        axios({\r\n          method: 'post',\r\n          url: `${IPModule.getIP()}:3000/api/v1/posts/`,\r\n          headers : { 'x-access-token' : jwt  } ,\r\n            data: {\r\n              \"project_pair_key\" : `${teamID}`,\r\n              \"data\" : {\r\n                      \"locationToSetup\" : `${this.state.locationToSetup}`,\r\n                      \"imageLocation\" : `${this.state.imgBLOB}`\r\n              }\r\n          }\r\n        }).then( (res) => {\r\n          this.showImageAfterUpload()\r\n          this.showMessageUploadComplete()\r\n          console.log(\"pass \"+ res)\r\n        }).catch( (err) => {\r\n          console.log(\"err \"+ err)\r\n          this.showMessageUploadError()\r\n        })\r\n      }\r\n\r\n      showImageAfterUpload(){\r\n        if(this.state.imgBLOB === null){\r\n          return <p style={{color:'red'}} >ยังไม่ได้อัพโหลดรูป</p>\r\n        } else {\r\n          return (\r\n            <div style={{marginTop:'20px'}}>\r\n              <img alt=\"ds\" src={this.state.imgBLOB} style={{width: '100%'}}/>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n\r\n      editImage(){\r\n      return  this.setState({\r\n          pictures: [] ,\r\n          img : [] ,\r\n          imgBLOB : null\r\n        })\r\n      }\r\n\r\n      showMessageUploadComplete(){\r\n        this.setState({\r\n          message : 'อัพโหลดรูปภาพแล้ว'\r\n        })\r\n        if( this.state.message !== undefined ){\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                      message : null\r\n                    }) \r\n                }, 3000);\r\n        }   \r\n    }\r\n\r\n    showMessageUploadError(){\r\n      this.setState({\r\n        message : 'อัพโหลดรูปภาพไม่สำเร็จ โปรดอัพโหลดใหม่'\r\n      })\r\n          setTimeout(() => {\r\n              this.setState({\r\n                  message : null\r\n              }) \r\n          }, 3000);\r\n  }\r\n\r\n      render() {\r\n        const { pictures, img, imgBLOB, message } = this.state\r\n\r\n        return (\r\n          <div>\r\n          \r\n          <div>\r\n          \r\n          <form action=\"\" method=\"post\">\r\n            <MDBInput label=\"สถานที่ติดตั้ง\" name=\"locationToSetup\" onChange={this.onChange}/>\r\n          </form>\r\n\r\n      {/*  <ImageUploader\r\n        withIcon={true}\r\n        buttonText=\"Choose images\"\r\n        onChange={this.onDrop}\r\n        imgExtension={[\".jpg\", \".gif\", \".png\", \".jpeg\", \".gif\"]}\r\n        label={\"Upload image\"}\r\n        maxFileSize={5242880}\r\n        />\r\n      */}\r\n        \r\n        <ul  className=\"list-inline\">\r\n          {this.showNameImageUpload(pictures)}\r\n          {this.showImageUpload(img)}\r\n        </ul>\r\n\r\n        <div className=\"container-fluid\">\r\n        <Button variant=\"btn btn-block btn-success\" onClick={ () => this.sendImage()}>ส่งรูปภาพ</Button>\r\n          { this.state.imgBLOB != null &&  (<br />) }\r\n          { this.state.imgBLOB != null && (\r\n              <Button variant=\"btn btn-block btn-warning\" onClick={ () => this.editImage()}>แก้ไขรูปภาพ</Button>\r\n          ) }\r\n          <br />\r\n          { this.state.imgBLOB != null &&  (\r\n            <p style={{ marginTop:'3px'}}>{message}</p>\r\n          ) }\r\n          <br />\r\n        { this.showImageAfterUpload(imgBLOB) }\r\n        </div>\r\n          \r\n        </div>\r\n        </div>\r\n        )\r\n      }\r\n}\r\n","module.exports.removeDataLocalStorage = function(){\r\n    localStorage.removeItem('user')\r\n    localStorage.removeItem( 'user_id')\r\n    localStorage.removeItem('teamproject_ID')\r\n}","module.exports.getIP = function(){\r\n    return 'http://54.254.61.44'\r\n}"],"sourceRoot":""}